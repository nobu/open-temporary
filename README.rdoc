= open-temporary the "real file" temporary one.

OK, so you dropped into a tempfile pitfall.  Like Rails.

https://github.com/rails/rails/pull/2068

Why not just fix the situation so that you can safely dup?

= How to use it?

You first add

  gem "open-temporary"

to your Gemfile, then from your .rb file,

  require 'open-temporary'

And that's it.  Now you have the "open" method extended, just like
the open-uri standard library.

  File.open # => gives you a temporary file

This time the null (zero-arity) argument indicates this is a temporary
file.  You get a REAL instance of File, no proxy, no tweak.  It can be
dup'ed, it can be used with process forks, and still, you can just
leave it, and the GC reclaims the whole resources.

= Great!  So why this isn't a standard?

Because it has absolutely zero portability.  The magic behind the
scene is that we just let your operating system to reclaim what's
necessary.  That way, the behaviour detail is much much OS specific.
Especially, this kind of API is not doable on a Windows environment.
Might not also on Java (not sure).  So this can never be a part of
gospel ruby.
